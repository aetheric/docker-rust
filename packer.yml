---
description: An image for running rust builds on.
min_packer_version: 0.11.0

variables:

  # The version of alpine linux to use
  ALPINE: 'latest'

  # This should be either stable, beta, or nightly
  CHANNEL: null

builders:
  - type: docker
    image: "alpine:{{ user `ALPINE` }}"
    commit: true
    run_command:
      - '-d'
      - '-i'
      - '-t'
      - '{{.Image}}'
      - '/bin/sh'

provisioners:
  - type: shell
    #execute_command: "echo 'packer' | sudo -S sh -c '{{ .Vars }} {{ .Path }}'"
    inline:

      # Setting up needed variables
      - "CHANNEL=\"{{ user `CHANNEL` }}\""

      # Where all the rust artifacts are being hosted
      - "DIST_URL=\"https://static.rust-lang.org/dist\""

      # This just gets stuck on the end of binary distributions
      - "NAME_SUFFIX=\"x86_64-unknown-linux-gnu\""

      # The naming conventions for the tar archives and folders
      - "NAME_BIN=\"rust-${CHANNEL}-${NAME_SUFFIX}\""
      - "NAME_SRC=\"rustc-${CHANNEL}-src\""

      # The odd name used internally for a couple of things
      - "NAME_INT=\"rust-std-${NAME_SUFFIX}\""

      # This is where the rust sources need to be unpacked
      - "DIR_LIBS=\"/rust/${NAME_INT}/lib/rustlib/${NAME_SUFFIX}\""

      # Download all the development dependencies
      - "apk --no-cache add --virtual .build-dependencies
          ca-certificates
          curl
          gcc"
      
      # Download the rust binaries and verify them
      - "echo \"Attempting to download ${NAME_BIN} from ${DIST_URL}\"."
      - "curl -fO ${DIST_URL}/${NAME_BIN}.tar.gz"
      - "curl -fO ${DIST_URL}/${NAME_BIN}.tar.gz.sha256 | sha256sum -c"
      
      # Download all the rust sources
      - "echo 'Attempting to download ${NAME_SRC} from ${DIST_URL}'."
      - "curl -fO ${DIST_URL}/${NAME_SRC}.tar.gz"
      - "curl -fO ${DIST_URL}/${NAME_SRC}.tar.gz.sha256 | sha256sum -c"

      # Unpack the archives
      - "tar -xzf ${NAME_BIN}.tar.gz"
      - "tar -xzf ${NAME_SRC}.tar.gz"

      # Remove the archives
      - "rm -f ${NAME_BIN}.tar.gz"
      - "rm -f ${NAME_SRC}.tar.gz"

      # Move the binaries and sources to their expected positions
      - "mv ${NAME_BIN}/ /rust"
      - "mv rustc-${CHANNEL}/ ${DIR_LIBS}/src"

      # Run the installation script
      - "/rust/install.sh --verbose"

      # Clean up the build dependencies
      - "apk del .build-dependencies"

post-processors:
  -
    
    # Tag the image with the channel and overwrite
    - type: docker-tag
      repository: aetheric/rust
      tag: '{{ user `CHANNEL` }}'
 
    # Push the image to the docker hub
    #- type: docker-push

